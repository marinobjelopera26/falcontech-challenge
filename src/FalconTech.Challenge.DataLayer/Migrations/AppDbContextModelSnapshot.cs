// <auto-generated />
using System;
using FalconTech.Challenge.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FalconTech.Challenge.DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SYSDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("SYSUSER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(4928),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Director",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(4958),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Actor",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(4960),
                            SYSUSER = "Init"
                        });
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SYSDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("SYSUSER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Movies.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SYSDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("SYSUSER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Action movie",
                            Name = "Action",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5073),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Adventure movie",
                            Name = "Adventure",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5076),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comedy movie",
                            Name = "Comedy",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5078),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Crime movie",
                            Name = "Crime",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5080),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Drama movie",
                            Name = "Drama",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5082),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fantasy movie",
                            Name = "Fantasy",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5083),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Historical movie",
                            Name = "Historical",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5085),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Horror movie",
                            Name = "Horror",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5087),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Romantic movie",
                            Name = "Romance",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5089),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Satire movie",
                            Name = "Satire",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5091),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Science fiction movie",
                            Name = "Sci-Fi",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5093),
                            SYSUSER = "Init"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Action movie",
                            Name = "Thriller",
                            SYSDATE = new DateTime(2022, 9, 26, 19, 36, 56, 983, DateTimeKind.Local).AddTicks(5095),
                            SYSUSER = "Init"
                        });
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Movies.Invitation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SYSDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("SYSUSER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WasAccepted")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Movies.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SYSDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("SYSUSER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MovieUser");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Identity.User", b =>
                {
                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Movies.Invitation", b =>
                {
                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Movies.Movie", "Movie")
                        .WithMany("Invitations")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Identity.User", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Movies.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Movies.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Movies.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FalconTech.Challenge.DataLayer.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Identity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Identity.User", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("FalconTech.Challenge.DataLayer.Entities.Movies.Movie", b =>
                {
                    b.Navigation("Invitations");
                });
#pragma warning restore 612, 618
        }
    }
}
